package com.zeta.ai.zeta_ai;

import com.zeta.ai.zeta_ai.application.configuration.CorsConfig__BeanDefinitions;
import com.zeta.ai.zeta_ai.application.configuration.GeminiConfiguration__BeanDefinitions;
import com.zeta.ai.zeta_ai.application.configuration.ModelMapperConfig__BeanDefinitions;
import com.zeta.ai.zeta_ai.application.configuration.SwaggerConfig__BeanDefinitions;
import com.zeta.ai.zeta_ai.application.exceptions.CustomExceptionHandler__BeanDefinitions;
import com.zeta.ai.zeta_ai.application.services.impl.GeminiServiceImpl__BeanDefinitions;
import com.zeta.ai.zeta_ai.modules.cars.controllers.CarController__BeanDefinitions;
import com.zeta.ai.zeta_ai.modules.cars.repositories.ICarRepository__BeanDefinitions;
import com.zeta.ai.zeta_ai.modules.cars.services.impl.CarServiceImpl__BeanDefinitions;
import com.zeta.ai.zeta_ai.modules.conversation.controllers.ConversationController__BeanDefinitions;
import com.zeta.ai.zeta_ai.modules.conversation.service.impl.ConversationServiceImpl__BeanDefinitions;
import org.springdoc.core.configuration.SpringDocConfiguration__BeanDefinitions;
import org.springdoc.core.configuration.SpringDocPageableConfiguration__BeanDefinitions;
import org.springdoc.core.configuration.SpringDocSortConfiguration__BeanDefinitions;
import org.springdoc.core.configuration.SpringDocUIConfiguration__BeanDefinitions;
import org.springdoc.core.properties.SpringDocConfigProperties__BeanDefinitions;
import org.springdoc.core.properties.SwaggerUiConfigParameters__BeanDefinitions;
import org.springdoc.core.properties.SwaggerUiConfigProperties__BeanDefinitions;
import org.springdoc.core.properties.SwaggerUiOAuthProperties__BeanDefinitions;
import org.springdoc.webmvc.core.configuration.SpringDocWebMvcConfiguration__BeanDefinitions;
import org.springframework.ai.model.chat.client.autoconfigure.ChatClientAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.chat.client.autoconfigure.ChatClientBuilderProperties__BeanDefinitions;
import org.springframework.ai.model.chat.memory.autoconfigure.ChatMemoryAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.chat.observation.autoconfigure.ChatObservationAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.chat.observation.autoconfigure.ChatObservationProperties__BeanDefinitions;
import org.springframework.ai.model.embedding.observation.autoconfigure.EmbeddingObservationAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.image.observation.autoconfigure.ImageObservationAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.image.observation.autoconfigure.ImageObservationProperties__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiAudioSpeechAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiAudioSpeechProperties__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiAudioTranscriptionAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiAudioTranscriptionProperties__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiChatAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiChatProperties__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiConnectionProperties__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiEmbeddingAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiEmbeddingProperties__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiImageAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiImageProperties__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiModerationAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.openai.autoconfigure.OpenAiModerationProperties__BeanDefinitions;
import org.springframework.ai.model.tool.autoconfigure.ToolCallingAutoConfiguration__BeanDefinitions;
import org.springframework.ai.model.tool.autoconfigure.ToolCallingProperties__BeanDefinitions;
import org.springframework.ai.retry.autoconfigure.SpringAiRetryAutoConfiguration__BeanDefinitions;
import org.springframework.ai.retry.autoconfigure.SpringAiRetryProperties__BeanDefinitions;
import org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator__BeanDefinitions;
import org.springframework.aot.generate.Generated;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.autoconfigure.AutoConfigurationPackages__BeanDefinitions;
import org.springframework.boot.autoconfigure.aop.AopAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.codec.CodecProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.LifecycleProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.client.HttpClientAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.client.HttpClientProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.info.ProjectInfoProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.JdbcProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.reactor.ReactorProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.ssl.SslProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutionProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.ServerProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.WebProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.MultipartProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration__BeanDefinitions;
import org.springframework.boot.context.properties.BoundConfigurationProperties__BeanDefinitions;
import org.springframework.boot.context.properties.ConfigurationPropertiesBinder__BeanDefinitions;
import org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor__BeanDefinitions;
import org.springframework.boot.jackson.JsonMixinModuleEntries__BeanDefinitions;
import org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer__BeanDefinitions;
import org.springframework.boot.validation.beanvalidation.MethodValidationExcludeFilter__BeanDefinitions;
import org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor__BeanDefinitions;
import org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor__BeanDefinitions;
import org.springframework.context.event.DefaultEventListenerFactory__BeanDefinitions;
import org.springframework.context.event.EventListenerMethodProcessor__BeanDefinitions;
import org.springframework.data.jpa.mapping.JpaMetamodelMappingContext__BeanDefinitions;
import org.springframework.data.jpa.repository.support.DefaultJpaContext__BeanDefinitions;
import org.springframework.data.jpa.repository.support.EntityManagerBeanDefinitionRegistrarPostProcessor__BeanDefinitions;
import org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension__BeanDefinitions;
import org.springframework.data.jpa.util.JpaMetamodelCacheCleanup__BeanDefinitions;
import org.springframework.data.repository.core.support.PropertiesBasedNamedQueries__BeanDefinitions;
import org.springframework.data.repository.core.support.RepositoryComposition__BeanDefinitions;
import org.springframework.data.web.config.ProjectingArgumentResolverRegistrar__BeanDefinitions;
import org.springframework.data.web.config.SpringDataJacksonConfiguration__BeanDefinitions;
import org.springframework.data.web.config.SpringDataWebConfiguration__BeanDefinitions;
import org.springframework.orm.jpa.SharedEntityManagerCreator__BeanDefinitions;
import org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration__BeanDefinitions;
import org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration__BeanDefinitions;

/**
 * Register bean definitions for the bean factory.
 */
@Generated
public class ZetaAiApplication__BeanFactoryRegistrations {
  /**
   * Register the bean definitions.
   */
  public void registerBeanDefinitions(DefaultListableBeanFactory beanFactory) {
    beanFactory.registerBeanDefinition("org.springframework.context.event.internalEventListenerProcessor", EventListenerMethodProcessor__BeanDefinitions.getInternalEventListenerProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.context.event.internalEventListenerFactory", DefaultEventListenerFactory__BeanDefinitions.getInternalEventListenerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("zetaAiApplication", ZetaAiApplication__BeanDefinitions.getZetaAiApplicationBeanDefinition());
    beanFactory.registerBeanDefinition("corsConfig", CorsConfig__BeanDefinitions.getCorsConfigBeanDefinition());
    beanFactory.registerBeanDefinition("geminiConfiguration", GeminiConfiguration__BeanDefinitions.getGeminiConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("modelMapperConfig", ModelMapperConfig__BeanDefinitions.getModelMapperConfigBeanDefinition());
    beanFactory.registerBeanDefinition("swaggerConfig", SwaggerConfig__BeanDefinitions.getSwaggerConfigBeanDefinition());
    beanFactory.registerBeanDefinition("customExceptionHandler", CustomExceptionHandler__BeanDefinitions.getCustomExceptionHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("geminiServiceImpl", GeminiServiceImpl__BeanDefinitions.getGeminiServiceImplBeanDefinition());
    beanFactory.registerBeanDefinition("carController", CarController__BeanDefinitions.getCarControllerBeanDefinition());
    beanFactory.registerBeanDefinition("carServiceImpl", CarServiceImpl__BeanDefinitions.getCarServiceImplBeanDefinition());
    beanFactory.registerBeanDefinition("conversationController", ConversationController__BeanDefinitions.getConversationControllerBeanDefinition());
    beanFactory.registerBeanDefinition("conversationServiceImpl", ConversationServiceImpl__BeanDefinitions.getConversationServiceImplBeanDefinition());
    beanFactory.registerBeanDefinition("corsConfigurer", CorsConfig__BeanDefinitions.getCorsConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("modelMapper", ModelMapperConfig__BeanDefinitions.getModelMapperBeanDefinition());
    beanFactory.registerBeanDefinition("titleDescription", SwaggerConfig__BeanDefinitions.getTitleDescriptionBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.AutoConfigurationPackages", AutoConfigurationPackages__BeanDefinitions.BasePackages.getAutoConfigurationPackagesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration", PropertyPlaceholderAutoConfiguration__BeanDefinitions.getPropertyPlaceholderAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("propertySourcesPlaceholderConfigurer", PropertyPlaceholderAutoConfiguration__BeanDefinitions.getPropertySourcesPlaceholderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration", SslAutoConfiguration__BeanDefinitions.getSslAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("fileWatcher", SslAutoConfiguration__BeanDefinitions.getFileWatcherBeanDefinition());
    beanFactory.registerBeanDefinition("sslPropertiesSslBundleRegistrar", SslAutoConfiguration__BeanDefinitions.getSslPropertiesSslBundleRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("sslBundleRegistry", SslAutoConfiguration__BeanDefinitions.getSslBundleRegistryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor", ConfigurationPropertiesBindingPostProcessor__BeanDefinitions.getConfigurationPropertiesBindingPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.internalConfigurationPropertiesBinder", ConfigurationPropertiesBinder__BeanDefinitions.ConfigurationPropertiesBinderFactory.getInternalConfigurationPropertiesBinderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.BoundConfigurationProperties", BoundConfigurationProperties__BeanDefinitions.getBoundConfigurationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter", MethodValidationExcludeFilter__BeanDefinitions.getMethodValidationExcludeFilterBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ssl-org.springframework.boot.autoconfigure.ssl.SslProperties", SslProperties__BeanDefinitions.getSslPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration", WebSocketServletAutoConfiguration__BeanDefinitions.TomcatWebSocketConfiguration.getTomcatWebSocketConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("websocketServletWebServerCustomizer", WebSocketServletAutoConfiguration__BeanDefinitions.TomcatWebSocketConfiguration.getWebsocketServletWebServerCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration", WebSocketServletAutoConfiguration__BeanDefinitions.getWebSocketServletAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat", ServletWebServerFactoryConfiguration__BeanDefinitions.EmbeddedTomcat.getEmbeddedTomcatBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatServletWebServerFactory", ServletWebServerFactoryConfiguration__BeanDefinitions.EmbeddedTomcat.getTomcatServletWebServerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration", ServletWebServerFactoryAutoConfiguration__BeanDefinitions.getServletWebServerFactoryAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("servletWebServerFactoryCustomizer", ServletWebServerFactoryAutoConfiguration__BeanDefinitions.getServletWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatServletWebServerFactoryCustomizer", ServletWebServerFactoryAutoConfiguration__BeanDefinitions.getTomcatServletWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("server-org.springframework.boot.autoconfigure.web.ServerProperties", ServerProperties__BeanDefinitions.getServerPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("webServerFactoryCustomizerBeanPostProcessor", WebServerFactoryCustomizerBeanPostProcessor__BeanDefinitions.getWebServerFactoryCustomizerBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("errorPageRegistrarBeanPostProcessor", ErrorPageRegistrarBeanPostProcessor__BeanDefinitions.getErrorPageRegistrarBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletConfiguration.getDispatcherServletConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("dispatcherServlet", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletConfiguration.getDispatcherServletBeanDefinition());
    beanFactory.registerBeanDefinition("spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties", WebMvcProperties__BeanDefinitions.getWebMvcPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletRegistrationConfiguration.getDispatcherServletRegistrationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("dispatcherServletRegistration", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletRegistrationConfiguration.getDispatcherServletRegistrationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration", DispatcherServletAutoConfiguration__BeanDefinitions.getDispatcherServletAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration", JacksonAutoConfiguration__BeanDefinitions.Jackson2ObjectMapperBuilderCustomizerConfiguration.getJacksonObjectMapperBuilderCustomizerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("standardJacksonObjectMapperBuilderCustomizer", JacksonAutoConfiguration__BeanDefinitions.Jackson2ObjectMapperBuilderCustomizerConfiguration.getStandardJacksonObjectMapperBuilderCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties", JacksonProperties__BeanDefinitions.getJacksonPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperBuilderConfiguration.getJacksonObjectMapperBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonObjectMapperBuilder", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperBuilderConfiguration.getJacksonObjectMapperBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration", JacksonAutoConfiguration__BeanDefinitions.ParameterNamesModuleConfiguration.getParameterNamesModuleConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("parameterNamesModule", JacksonAutoConfiguration__BeanDefinitions.ParameterNamesModuleConfiguration.getParameterNamesModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperConfiguration.getJacksonObjectMapperConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonObjectMapper", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperConfiguration.getJacksonObjectMapperBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration", JacksonAutoConfiguration__BeanDefinitions.JacksonMixinConfiguration.getJacksonMixinConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jsonMixinModuleEntries", JsonMixinModuleEntries__BeanDefinitions.getJsonMixinModuleEntriesBeanDefinition());
    beanFactory.registerBeanDefinition("jsonMixinModule", JacksonAutoConfiguration__BeanDefinitions.JacksonMixinConfiguration.getJsonMixinModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration", JacksonAutoConfiguration__BeanDefinitions.getJacksonAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jsonComponentModule", JacksonAutoConfiguration__BeanDefinitions.getJsonComponentModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$DefaultCodecsConfiguration", CodecsAutoConfiguration__BeanDefinitions.DefaultCodecsConfiguration.getDefaultCodecsConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("defaultCodecCustomizer", CodecsAutoConfiguration__BeanDefinitions.DefaultCodecsConfiguration.getDefaultCodecCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration", CodecsAutoConfiguration__BeanDefinitions.JacksonCodecConfiguration.getJacksonCodecConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonCodecCustomizer", CodecsAutoConfiguration__BeanDefinitions.JacksonCodecConfiguration.getJacksonCodecCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration", CodecsAutoConfiguration__BeanDefinitions.getCodecsAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.codec-org.springframework.boot.autoconfigure.codec.CodecProperties", CodecProperties__BeanDefinitions.getCodecPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration", ValidationAutoConfiguration__BeanDefinitions.getValidationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("defaultValidator", ValidationAutoConfiguration__BeanDefinitions.getDefaultValidatorBeanDefinition());
    beanFactory.registerBeanDefinition("methodValidationPostProcessor", ValidationAutoConfiguration__BeanDefinitions.getMethodValidationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$ThreadPoolTaskExecutorBuilderConfiguration", TaskExecutorConfigurations__BeanDefinitions.ThreadPoolTaskExecutorBuilderConfiguration.getThreadPoolTaskExecutorBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("threadPoolTaskExecutorBuilder", TaskExecutorConfigurations__BeanDefinitions.ThreadPoolTaskExecutorBuilderConfiguration.getThreadPoolTaskExecutorBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$SimpleAsyncTaskExecutorBuilderConfiguration", TaskExecutorConfigurations__BeanDefinitions.SimpleAsyncTaskExecutorBuilderConfiguration.getSimpleAsyncTaskExecutorBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("simpleAsyncTaskExecutorBuilder", TaskExecutorConfigurations__BeanDefinitions.SimpleAsyncTaskExecutorBuilderConfiguration.getSimpleAsyncTaskExecutorBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorConfiguration", TaskExecutorConfigurations__BeanDefinitions.TaskExecutorConfiguration.getTaskExecutorConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("applicationTaskExecutor", TaskExecutorConfigurations__BeanDefinitions.TaskExecutorConfiguration.getApplicationTaskExecutorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration", TaskExecutionAutoConfiguration__BeanDefinitions.getTaskExecutionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties", TaskExecutionProperties__BeanDefinitions.getTaskExecutionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration", ErrorMvcAutoConfiguration__BeanDefinitions.WhitelabelErrorViewConfiguration.getWhitelabelErrorViewConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("error", ErrorMvcAutoConfiguration__BeanDefinitions.WhitelabelErrorViewConfiguration.getErrorBeanDefinition());
    beanFactory.registerBeanDefinition("beanNameViewResolver", ErrorMvcAutoConfiguration__BeanDefinitions.WhitelabelErrorViewConfiguration.getBeanNameViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration", ErrorMvcAutoConfiguration__BeanDefinitions.DefaultErrorViewResolverConfiguration.getDefaultErrorViewResolverConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("conventionErrorViewResolver", ErrorMvcAutoConfiguration__BeanDefinitions.DefaultErrorViewResolverConfiguration.getConventionErrorViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("spring.web-org.springframework.boot.autoconfigure.web.WebProperties", WebProperties__BeanDefinitions.getWebPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration", ErrorMvcAutoConfiguration__BeanDefinitions.getErrorMvcAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("errorAttributes", ErrorMvcAutoConfiguration__BeanDefinitions.getErrorAttributesBeanDefinition());
    beanFactory.registerBeanDefinition("basicErrorController", ErrorMvcAutoConfiguration__BeanDefinitions.getBasicErrorControllerBeanDefinition());
    beanFactory.registerBeanDefinition("errorPageCustomizer", ErrorMvcAutoConfiguration__BeanDefinitions.getErrorPageCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("preserveErrorControllerTargetClassPostProcessor", ErrorMvcAutoConfiguration__BeanDefinitions.getPreserveErrorControllerTargetClassPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getEnableWebMvcConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("welcomePageHandlerMapping", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getWelcomePageHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("welcomePageNotAcceptableHandlerMapping", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getWelcomePageNotAcceptableHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("localeResolver", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getLocaleResolverBeanDefinition());
    beanFactory.registerBeanDefinition("themeResolver", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getThemeResolverBeanDefinition());
    beanFactory.registerBeanDefinition("flashMapManager", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getFlashMapManagerBeanDefinition());
    beanFactory.registerBeanDefinition("viewNameTranslator", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getViewNameTranslatorBeanDefinition());
    beanFactory.registerBeanDefinition("mvcConversionService", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcConversionServiceBeanDefinition());
    beanFactory.registerBeanDefinition("mvcValidator", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcValidatorBeanDefinition());
    beanFactory.registerBeanDefinition("mvcContentNegotiationManager", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcContentNegotiationManagerBeanDefinition());
    beanFactory.registerBeanDefinition("requestMappingHandlerMapping", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getRequestMappingHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("mvcPatternParser", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcPatternParserBeanDefinition());
    beanFactory.registerBeanDefinition("mvcUrlPathHelper", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcUrlPathHelperBeanDefinition());
    beanFactory.registerBeanDefinition("mvcPathMatcher", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcPathMatcherBeanDefinition());
    beanFactory.registerBeanDefinition("viewControllerHandlerMapping", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getViewControllerHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("beanNameHandlerMapping", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getBeanNameHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("routerFunctionMapping", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getRouterFunctionMappingBeanDefinition());
    beanFactory.registerBeanDefinition("resourceHandlerMapping", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getResourceHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("mvcResourceUrlProvider", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcResourceUrlProviderBeanDefinition());
    beanFactory.registerBeanDefinition("defaultServletHandlerMapping", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getDefaultServletHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("requestMappingHandlerAdapter", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getRequestMappingHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("handlerFunctionAdapter", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getHandlerFunctionAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("mvcUriComponentsContributor", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcUriComponentsContributorBeanDefinition());
    beanFactory.registerBeanDefinition("httpRequestHandlerAdapter", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getHttpRequestHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("simpleControllerHandlerAdapter", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getSimpleControllerHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("handlerExceptionResolver", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getHandlerExceptionResolverBeanDefinition());
    beanFactory.registerBeanDefinition("mvcViewResolver", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("mvcHandlerMappingIntrospector", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcHandlerMappingIntrospectorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter", WebMvcAutoConfiguration__BeanDefinitions.WebMvcAutoConfigurationAdapter.getWebMvcAutoConfigurationAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("defaultViewResolver", WebMvcAutoConfiguration__BeanDefinitions.WebMvcAutoConfigurationAdapter.getDefaultViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("viewResolver", WebMvcAutoConfiguration__BeanDefinitions.WebMvcAutoConfigurationAdapter.getViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("requestContextFilter", WebMvcAutoConfiguration__BeanDefinitions.WebMvcAutoConfigurationAdapter.getRequestContextFilterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration", WebMvcAutoConfiguration__BeanDefinitions.getWebMvcAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("formContentFilter", WebMvcAutoConfiguration__BeanDefinitions.getFormContentFilterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocConfiguration$QuerydslProvider", SpringDocConfiguration__BeanDefinitions.QuerydslProvider.getQuerydslProviderBeanDefinition());
    beanFactory.registerBeanDefinition("queryDslQuerydslPredicateOperationCustomizer", SpringDocConfiguration__BeanDefinitions.QuerydslProvider.getQueryDslQuerydslPredicateOperationCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocConfiguration$OpenApiResourceAdvice", SpringDocConfiguration__BeanDefinitions.OpenApiResourceAdvice.getOpenApiResourceAdviceBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocConfiguration$SpringDocWebFluxSupportConfiguration", SpringDocConfiguration__BeanDefinitions.SpringDocWebFluxSupportConfiguration.getSpringDocWebFluxSupportConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("webFluxSupportConverter", SpringDocConfiguration__BeanDefinitions.SpringDocWebFluxSupportConfiguration.getWebFluxSupportConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocConfiguration$SpringDocSpringDataWebPropertiesProvider", SpringDocConfiguration__BeanDefinitions.SpringDocSpringDataWebPropertiesProvider.getSpringDocSpringDataWebPropertiesProviderBeanDefinition());
    beanFactory.registerBeanDefinition("springDataWebPropertiesProvider", SpringDocConfiguration__BeanDefinitions.SpringDocSpringDataWebPropertiesProvider.getSpringDataWebPropertiesProviderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocConfiguration$WebConversionServiceConfiguration", SpringDocConfiguration__BeanDefinitions.WebConversionServiceConfiguration.getWebConversionServiceConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("webConversionServiceProvider", SpringDocConfiguration__BeanDefinitions.WebConversionServiceConfiguration.getWebConversionServiceProviderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocConfiguration", SpringDocConfiguration__BeanDefinitions.getSpringDocConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("localSpringDocParameterNameDiscoverer", SpringDocConfiguration__BeanDefinitions.getLocalSpringDocParameterNameDiscovererBeanDefinition());
    beanFactory.registerBeanDefinition("additionalModelsConverter", SpringDocConfiguration__BeanDefinitions.getAdditionalModelsConverterBeanDefinition());
    beanFactory.registerBeanDefinition("fileSupportConverter", SpringDocConfiguration__BeanDefinitions.getFileSupportConverterBeanDefinition());
    beanFactory.registerBeanDefinition("responseSupportConverter", SpringDocConfiguration__BeanDefinitions.getResponseSupportConverterBeanDefinition());
    beanFactory.registerBeanDefinition("schemaPropertyDeprecatingConverter", SpringDocConfiguration__BeanDefinitions.getSchemaPropertyDeprecatingConverterBeanDefinition());
    beanFactory.registerBeanDefinition("polymorphicModelConverter", SpringDocConfiguration__BeanDefinitions.getPolymorphicModelConverterBeanDefinition());
    beanFactory.registerBeanDefinition("openAPIBuilder", SpringDocConfiguration__BeanDefinitions.getOpenAPIBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("modelConverterRegistrar", SpringDocConfiguration__BeanDefinitions.getModelConverterRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("operationBuilder", SpringDocConfiguration__BeanDefinitions.getOperationBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("propertyResolverUtils", SpringDocConfiguration__BeanDefinitions.getPropertyResolverUtilsBeanDefinition());
    beanFactory.registerBeanDefinition("requestBodyBuilder", SpringDocConfiguration__BeanDefinitions.getRequestBodyBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("securityParser", SpringDocConfiguration__BeanDefinitions.getSecurityParserBeanDefinition());
    beanFactory.registerBeanDefinition("genericReturnTypeParser", SpringDocConfiguration__BeanDefinitions.getGenericReturnTypeParserBeanDefinition());
    beanFactory.registerBeanDefinition("parameterBuilder", SpringDocConfiguration__BeanDefinitions.getParameterBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("springDocProviders", SpringDocConfiguration__BeanDefinitions.getSpringDocProvidersBeanDefinition());
    beanFactory.registerBeanDefinition("springdocObjectMapperProvider", SpringDocConfiguration__BeanDefinitions.getSpringdocObjectMapperProviderBeanDefinition());
    beanFactory.registerBeanDefinition("springDocCustomizers", SpringDocConfiguration__BeanDefinitions.getSpringDocCustomizersBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocPageableConfiguration", SpringDocPageableConfiguration__BeanDefinitions.getSpringDocPageableConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("pageableOpenAPIConverter", SpringDocPageableConfiguration__BeanDefinitions.getPageableOpenAPIConverterBeanDefinition());
    beanFactory.registerBeanDefinition("delegatingMethodParameterCustomizer", SpringDocPageableConfiguration__BeanDefinitions.getDelegatingMethodParameterCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocSortConfiguration", SpringDocSortConfiguration__BeanDefinitions.getSpringDocSortConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("sortOpenAPIConverter", SpringDocSortConfiguration__BeanDefinitions.getSortOpenAPIConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocUIConfiguration", SpringDocUIConfiguration__BeanDefinitions.getSpringDocUIConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.properties.SpringDocConfigProperties", SpringDocConfigProperties__BeanDefinitions.getSpringDocConfigPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.properties.SwaggerUiConfigParameters", SwaggerUiConfigParameters__BeanDefinitions.getSwaggerUiConfigParametersBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.properties.SwaggerUiConfigProperties", SwaggerUiConfigProperties__BeanDefinitions.getSwaggerUiConfigPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.properties.SwaggerUiOAuthProperties", SwaggerUiOAuthProperties__BeanDefinitions.getSwaggerUiOAuthPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.webmvc.core.configuration.SpringDocWebMvcConfiguration$SpringDocWebMvcRouterConfiguration", SpringDocWebMvcConfiguration__BeanDefinitions.SpringDocWebMvcRouterConfiguration.getSpringDocWebMvcRouterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("routerFunctionProvider", SpringDocWebMvcConfiguration__BeanDefinitions.SpringDocWebMvcRouterConfiguration.getRouterFunctionProviderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.webmvc.core.configuration.SpringDocWebMvcConfiguration", SpringDocWebMvcConfiguration__BeanDefinitions.getSpringDocWebMvcConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("openApiResource", SpringDocWebMvcConfiguration__BeanDefinitions.getOpenApiResourceBeanDefinition());
    beanFactory.registerBeanDefinition("requestBuilder", SpringDocWebMvcConfiguration__BeanDefinitions.getRequestBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("springWebProvider", SpringDocWebMvcConfiguration__BeanDefinitions.getSpringWebProviderBeanDefinition());
    beanFactory.registerBeanDefinition("responseBuilder", SpringDocWebMvcConfiguration__BeanDefinitions.getResponseBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.webmvc.ui.SwaggerConfig", org.springdoc.webmvc.ui.SwaggerConfig__BeanDefinitions.getSwaggerConfigBeanDefinition());
    beanFactory.registerBeanDefinition("swaggerWelcome", org.springdoc.webmvc.ui.SwaggerConfig__BeanDefinitions.getSwaggerWelcomeBeanDefinition());
    beanFactory.registerBeanDefinition("swaggerConfigResource", org.springdoc.webmvc.ui.SwaggerConfig__BeanDefinitions.getSwaggerConfigResourceBeanDefinition());
    beanFactory.registerBeanDefinition("indexPageTransformer", org.springdoc.webmvc.ui.SwaggerConfig__BeanDefinitions.getIndexPageTransformerBeanDefinition());
    beanFactory.registerBeanDefinition("swaggerWebMvcConfigurer", org.springdoc.webmvc.ui.SwaggerConfig__BeanDefinitions.getSwaggerWebMvcConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("swaggerResourceResolver", org.springdoc.webmvc.ui.SwaggerConfig__BeanDefinitions.getSwaggerResourceResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.chat.client.autoconfigure.ChatClientAutoConfiguration$TracerNotPresentObservationConfiguration", ChatClientAutoConfiguration__BeanDefinitions.TracerNotPresentObservationConfiguration.getTracerNotPresentObservationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.chat.client.autoconfigure.ChatClientAutoConfiguration", ChatClientAutoConfiguration__BeanDefinitions.getChatClientAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("chatClientBuilderConfigurer", ChatClientAutoConfiguration__BeanDefinitions.getChatClientBuilderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("chatClientBuilder", ChatClientAutoConfiguration__BeanDefinitions.getChatClientBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.chat.client-org.springframework.ai.model.chat.client.autoconfigure.ChatClientBuilderProperties", ChatClientBuilderProperties__BeanDefinitions.getChatClientBuilderPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.chat.memory.autoconfigure.ChatMemoryAutoConfiguration", ChatMemoryAutoConfiguration__BeanDefinitions.getChatMemoryAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("chatMemoryRepository", ChatMemoryAutoConfiguration__BeanDefinitions.getChatMemoryRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("chatMemory", ChatMemoryAutoConfiguration__BeanDefinitions.getChatMemoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.chat.observation.autoconfigure.ChatObservationAutoConfiguration$TracerNotPresentObservationConfiguration", ChatObservationAutoConfiguration__BeanDefinitions.TracerNotPresentObservationConfiguration.getTracerNotPresentObservationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.chat.observation.autoconfigure.ChatObservationAutoConfiguration", ChatObservationAutoConfiguration__BeanDefinitions.getChatObservationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.chat.observations-org.springframework.ai.model.chat.observation.autoconfigure.ChatObservationProperties", ChatObservationProperties__BeanDefinitions.getChatObservationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.embedding.observation.autoconfigure.EmbeddingObservationAutoConfiguration", EmbeddingObservationAutoConfiguration__BeanDefinitions.getEmbeddingObservationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.image.observation.autoconfigure.ImageObservationAutoConfiguration$TracerNotPresentObservationConfiguration", ImageObservationAutoConfiguration__BeanDefinitions.TracerNotPresentObservationConfiguration.getTracerNotPresentObservationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.image.observation.autoconfigure.ImageObservationAutoConfiguration", ImageObservationAutoConfiguration__BeanDefinitions.getImageObservationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.image.observations-org.springframework.ai.model.image.observation.autoconfigure.ImageObservationProperties", ImageObservationProperties__BeanDefinitions.getImageObservationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.retry.autoconfigure.SpringAiRetryAutoConfiguration", SpringAiRetryAutoConfiguration__BeanDefinitions.getSpringAiRetryAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("retryTemplate", SpringAiRetryAutoConfiguration__BeanDefinitions.getRetryTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("responseErrorHandler", SpringAiRetryAutoConfiguration__BeanDefinitions.getResponseErrorHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.retry-org.springframework.ai.retry.autoconfigure.SpringAiRetryProperties", SpringAiRetryProperties__BeanDefinitions.getSpringAiRetryPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration", HttpMessageConvertersAutoConfiguration__BeanDefinitions.StringHttpMessageConverterConfiguration.getStringHttpMessageConverterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("stringHttpMessageConverter", HttpMessageConvertersAutoConfiguration__BeanDefinitions.StringHttpMessageConverterConfiguration.getStringHttpMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration", JacksonHttpMessageConvertersConfiguration__BeanDefinitions.MappingJackson2HttpMessageConverterConfiguration.getMappingJacksonHttpMessageConverterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("mappingJackson2HttpMessageConverter", JacksonHttpMessageConvertersConfiguration__BeanDefinitions.MappingJackson2HttpMessageConverterConfiguration.getMappingJacksonHttpMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration", JacksonHttpMessageConvertersConfiguration__BeanDefinitions.getJacksonHttpMessageConvertersConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration", HttpMessageConvertersAutoConfiguration__BeanDefinitions.getHttpMessageConvertersAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("messageConverters", HttpMessageConvertersAutoConfiguration__BeanDefinitions.getMessageConvertersBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.client.HttpClientAutoConfiguration", HttpClientAutoConfiguration__BeanDefinitions.getHttpClientAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("clientHttpRequestFactoryBuilder", HttpClientAutoConfiguration__BeanDefinitions.getClientHttpRequestFactoryBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("clientHttpRequestFactorySettings", HttpClientAutoConfiguration__BeanDefinitions.getClientHttpRequestFactorySettingsBeanDefinition());
    beanFactory.registerBeanDefinition("spring.http.client-org.springframework.boot.autoconfigure.http.client.HttpClientProperties", HttpClientProperties__BeanDefinitions.getHttpClientPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration", RestClientAutoConfiguration__BeanDefinitions.getRestClientAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("httpMessageConvertersRestClientCustomizer", RestClientAutoConfiguration__BeanDefinitions.getHttpMessageConvertersRestClientCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("restClientSsl", RestClientAutoConfiguration__BeanDefinitions.getRestClientSslBeanDefinition());
    beanFactory.registerBeanDefinition("restClientBuilderConfigurer", RestClientAutoConfiguration__BeanDefinitions.getRestClientBuilderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("restClientBuilder", RestClientAutoConfiguration__BeanDefinitions.getRestClientBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration$JdkClient", ClientHttpConnectorFactoryConfiguration__BeanDefinitions.JdkClient.getJdkClientBeanDefinition());
    beanFactory.registerBeanDefinition("jdkClientHttpConnectorFactory", ClientHttpConnectorFactoryConfiguration__BeanDefinitions.JdkClient.getJdkClientHttpConnectorFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration", ClientHttpConnectorAutoConfiguration__BeanDefinitions.getClientHttpConnectorAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("webClientHttpConnector", ClientHttpConnectorAutoConfiguration__BeanDefinitions.getWebClientHttpConnectorBeanDefinition());
    beanFactory.registerBeanDefinition("webClientHttpConnectorCustomizer", ClientHttpConnectorAutoConfiguration__BeanDefinitions.getWebClientHttpConnectorCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration$WebClientCodecsConfiguration", WebClientAutoConfiguration__BeanDefinitions.WebClientCodecsConfiguration.getWebClientCodecsConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("exchangeStrategiesCustomizer", WebClientAutoConfiguration__BeanDefinitions.WebClientCodecsConfiguration.getExchangeStrategiesCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration", WebClientAutoConfiguration__BeanDefinitions.getWebClientAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("webClientBuilder", WebClientAutoConfiguration__BeanDefinitions.getWebClientBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("webClientSsl", WebClientAutoConfiguration__BeanDefinitions.getWebClientSslBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.openai.autoconfigure.OpenAiAudioSpeechAutoConfiguration", OpenAiAudioSpeechAutoConfiguration__BeanDefinitions.getOpenAiAudioSpeechAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("openAiAudioSpeechModel", OpenAiAudioSpeechAutoConfiguration__BeanDefinitions.getOpenAiAudioSpeechModelBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.openai-org.springframework.ai.model.openai.autoconfigure.OpenAiConnectionProperties", OpenAiConnectionProperties__BeanDefinitions.getOpenAiConnectionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.openai.audio.speech-org.springframework.ai.model.openai.autoconfigure.OpenAiAudioSpeechProperties", OpenAiAudioSpeechProperties__BeanDefinitions.getOpenAiAudioSpeechPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.openai.autoconfigure.OpenAiAudioTranscriptionAutoConfiguration", OpenAiAudioTranscriptionAutoConfiguration__BeanDefinitions.getOpenAiAudioTranscriptionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("openAiAudioTranscriptionModel", OpenAiAudioTranscriptionAutoConfiguration__BeanDefinitions.getOpenAiAudioTranscriptionModelBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.openai.audio.transcription-org.springframework.ai.model.openai.autoconfigure.OpenAiAudioTranscriptionProperties", OpenAiAudioTranscriptionProperties__BeanDefinitions.getOpenAiAudioTranscriptionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.tool.autoconfigure.ToolCallingAutoConfiguration", ToolCallingAutoConfiguration__BeanDefinitions.getToolCallingAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("toolCallbackResolver", ToolCallingAutoConfiguration__BeanDefinitions.getToolCallbackResolverBeanDefinition());
    beanFactory.registerBeanDefinition("toolExecutionExceptionProcessor", ToolCallingAutoConfiguration__BeanDefinitions.getToolExecutionExceptionProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("toolCallingManager", ToolCallingAutoConfiguration__BeanDefinitions.getToolCallingManagerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.tools-org.springframework.ai.model.tool.autoconfigure.ToolCallingProperties", ToolCallingProperties__BeanDefinitions.getToolCallingPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.openai.autoconfigure.OpenAiChatAutoConfiguration", OpenAiChatAutoConfiguration__BeanDefinitions.getOpenAiChatAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("openAiChatModel", OpenAiChatAutoConfiguration__BeanDefinitions.getOpenAiChatModelBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.openai.chat-org.springframework.ai.model.openai.autoconfigure.OpenAiChatProperties", OpenAiChatProperties__BeanDefinitions.getOpenAiChatPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.openai.autoconfigure.OpenAiEmbeddingAutoConfiguration", OpenAiEmbeddingAutoConfiguration__BeanDefinitions.getOpenAiEmbeddingAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("openAiEmbeddingModel", OpenAiEmbeddingAutoConfiguration__BeanDefinitions.getOpenAiEmbeddingModelBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.openai.embedding-org.springframework.ai.model.openai.autoconfigure.OpenAiEmbeddingProperties", OpenAiEmbeddingProperties__BeanDefinitions.getOpenAiEmbeddingPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.openai.autoconfigure.OpenAiImageAutoConfiguration", OpenAiImageAutoConfiguration__BeanDefinitions.getOpenAiImageAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("openAiImageModel", OpenAiImageAutoConfiguration__BeanDefinitions.getOpenAiImageModelBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.openai.image-org.springframework.ai.model.openai.autoconfigure.OpenAiImageProperties", OpenAiImageProperties__BeanDefinitions.getOpenAiImagePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.ai.model.openai.autoconfigure.OpenAiModerationAutoConfiguration", OpenAiModerationAutoConfiguration__BeanDefinitions.getOpenAiModerationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("openAiModerationModel", OpenAiModerationAutoConfiguration__BeanDefinitions.getOpenAiModerationModelBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ai.openai.moderation-org.springframework.ai.model.openai.autoconfigure.OpenAiModerationProperties", OpenAiModerationProperties__BeanDefinitions.getOpenAiModerationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration", AopAutoConfiguration__BeanDefinitions.AspectJAutoProxyingConfiguration.CglibAutoProxyConfiguration.getCglibAutoProxyConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.aop.config.internalAutoProxyCreator", AnnotationAwareAspectJAutoProxyCreator__BeanDefinitions.getInternalAutoProxyCreatorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration", AopAutoConfiguration__BeanDefinitions.AspectJAutoProxyingConfiguration.getAspectJAutoProxyingConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration", AopAutoConfiguration__BeanDefinitions.getAopAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration", ApplicationAvailabilityAutoConfiguration__BeanDefinitions.getApplicationAvailabilityAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("applicationAvailability", ApplicationAvailabilityAutoConfiguration__BeanDefinitions.getApplicationAvailabilityBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration", JtaAutoConfiguration__BeanDefinitions.getJtaAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari", DataSourceConfiguration__BeanDefinitions.Hikari.getHikariBeanDefinition());
    beanFactory.registerBeanDefinition("jdbcConnectionDetailsHikariBeanPostProcessor", DataSourceConfiguration__BeanDefinitions.Hikari.getJdbcConnectionDetailsHikariBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("dataSource", DataSourceConfiguration__BeanDefinitions.Hikari.getDataSourceBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari", DataSourceJmxConfiguration__BeanDefinitions.Hikari.getHikariBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration", DataSourceJmxConfiguration__BeanDefinitions.getDataSourceJmxConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration", DataSourceAutoConfiguration__BeanDefinitions.PooledDataSourceConfiguration.getPooledDataSourceConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jdbcConnectionDetails", DataSourceAutoConfiguration__BeanDefinitions.PooledDataSourceConfiguration.getJdbcConnectionDetailsBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration", DataSourcePoolMetadataProvidersConfiguration__BeanDefinitions.HikariPoolDataSourceMetadataProviderConfiguration.getHikariPoolDataSourceMetadataProviderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("hikariPoolDataSourceMetadataProvider", DataSourcePoolMetadataProvidersConfiguration__BeanDefinitions.HikariPoolDataSourceMetadataProviderConfiguration.getHikariPoolDataSourceMetadataProviderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration", DataSourcePoolMetadataProvidersConfiguration__BeanDefinitions.getDataSourcePoolMetadataProvidersConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration", DataSourceAutoConfiguration__BeanDefinitions.getDataSourceAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties", DataSourceProperties__BeanDefinitions.getDataSourcePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration", TransactionManagerCustomizationAutoConfiguration__BeanDefinitions.getTransactionManagerCustomizationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("platformTransactionManagerCustomizers", TransactionManagerCustomizationAutoConfiguration__BeanDefinitions.getPlatformTransactionManagerCustomizersBeanDefinition());
    beanFactory.registerBeanDefinition("transactionExecutionListeners", TransactionManagerCustomizationAutoConfiguration__BeanDefinitions.getTransactionExecutionListenersBeanDefinition());
    beanFactory.registerBeanDefinition("spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties", TransactionProperties__BeanDefinitions.getTransactionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration", JpaBaseConfiguration__BeanDefinitions.JpaWebConfiguration.getJpaWebConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("openEntityManagerInViewInterceptor", JpaBaseConfiguration__BeanDefinitions.JpaWebConfiguration.getOpenEntityManagerInViewInterceptorBeanDefinition());
    beanFactory.registerBeanDefinition("openEntityManagerInViewInterceptorConfigurer", JpaBaseConfiguration__BeanDefinitions.JpaWebConfiguration.getOpenEntityManagerInViewInterceptorConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$PersistenceManagedTypesConfiguration", JpaBaseConfiguration__BeanDefinitions.PersistenceManagedTypesConfiguration.getPersistenceManagedTypesConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("persistenceManagedTypes", JpaBaseConfiguration__BeanDefinitions.PersistenceManagedTypesConfiguration.getPersistenceManagedTypesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration", HibernateJpaConfiguration__BeanDefinitions.getHibernateJpaConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("transactionManager", HibernateJpaConfiguration__BeanDefinitions.getTransactionManagerBeanDefinition());
    beanFactory.registerBeanDefinition("jpaVendorAdapter", HibernateJpaConfiguration__BeanDefinitions.getJpaVendorAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("entityManagerFactoryBuilder", HibernateJpaConfiguration__BeanDefinitions.getEntityManagerFactoryBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("entityManagerFactory", HibernateJpaConfiguration__BeanDefinitions.getEntityManagerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jpa.hibernate-org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties", HibernateProperties__BeanDefinitions.getHibernatePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jpa-org.springframework.boot.autoconfigure.orm.jpa.JpaProperties", JpaProperties__BeanDefinitions.getJpaPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration", HibernateJpaAutoConfiguration__BeanDefinitions.getHibernateJpaAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration", ConfigurationPropertiesAutoConfiguration__BeanDefinitions.getConfigurationPropertiesAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration", LifecycleAutoConfiguration__BeanDefinitions.getLifecycleAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("lifecycleProcessor", LifecycleAutoConfiguration__BeanDefinitions.getLifecycleProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties", LifecycleProperties__BeanDefinitions.getLifecyclePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration", PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions.getPersistenceExceptionTranslationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("persistenceExceptionTranslationPostProcessor", PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions.getPersistenceExceptionTranslationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration", JpaRepositoriesAutoConfiguration__BeanDefinitions.getJpaRepositoriesAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jpaSharedEM_entityManagerFactory", SharedEntityManagerCreator__BeanDefinitions.getJpaSharedEMentityManagerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("emBeanDefinitionRegistrarPostProcessor", EntityManagerBeanDefinitionRegistrarPostProcessor__BeanDefinitions.getEmBeanDefinitionRegistrarPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("jpaMappingContext", JpaMetamodelMappingContext__BeanDefinitions.getJpaMappingContextBeanDefinition());
    beanFactory.registerBeanDefinition("jpaContext", DefaultJpaContext__BeanDefinitions.getJpaContextBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.jpa.util.JpaMetamodelCacheCleanup", JpaMetamodelCacheCleanup__BeanDefinitions.getJpaMetamodelCacheCleanupBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension", JpaEvaluationContextExtension__BeanDefinitions.getJpaEvaluationContextExtensionBeanDefinition());
    beanFactory.registerBeanDefinition("jpa.named-queries#0", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition());
    beanFactory.registerBeanDefinition("jpa.ICarRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition());
    beanFactory.registerBeanDefinition("ICarRepository", ICarRepository__BeanDefinitions.getICarRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.web.config.ProjectingArgumentResolverRegistrar", ProjectingArgumentResolverRegistrar__BeanDefinitions.getProjectingArgumentResolverRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("projectingArgumentResolverBeanPostProcessor", ProjectingArgumentResolverRegistrar__BeanDefinitions.getProjectingArgumentResolverBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.web.config.SpringDataWebConfiguration", SpringDataWebConfiguration__BeanDefinitions.getSpringDataWebConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("pageableResolver", SpringDataWebConfiguration__BeanDefinitions.getPageableResolverBeanDefinition());
    beanFactory.registerBeanDefinition("sortResolver", SpringDataWebConfiguration__BeanDefinitions.getSortResolverBeanDefinition());
    beanFactory.registerBeanDefinition("offsetResolver", SpringDataWebConfiguration__BeanDefinitions.getOffsetResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.web.config.SpringDataJacksonConfiguration", SpringDataJacksonConfiguration__BeanDefinitions.getSpringDataJacksonConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonGeoModule", SpringDataJacksonConfiguration__BeanDefinitions.getJacksonGeoModuleBeanDefinition());
    beanFactory.registerBeanDefinition("pageModule", SpringDataJacksonConfiguration__BeanDefinitions.getPageModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration", SpringDataWebAutoConfiguration__BeanDefinitions.getSpringDataWebAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("pageableCustomizer", SpringDataWebAutoConfiguration__BeanDefinitions.getPageableCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("sortCustomizer", SpringDataWebAutoConfiguration__BeanDefinitions.getSortCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("springDataWebSettings", SpringDataWebAutoConfiguration__BeanDefinitions.getSpringDataWebSettingsBeanDefinition());
    beanFactory.registerBeanDefinition("spring.data.web-org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties", SpringDataWebProperties__BeanDefinitions.getSpringDataWebPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration", ProjectInfoAutoConfiguration__BeanDefinitions.getProjectInfoAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties", ProjectInfoProperties__BeanDefinitions.getProjectInfoPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration", JdbcTemplateConfiguration__BeanDefinitions.getJdbcTemplateConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jdbcTemplate", JdbcTemplateConfiguration__BeanDefinitions.getJdbcTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration", NamedParameterJdbcTemplateConfiguration__BeanDefinitions.getNamedParameterJdbcTemplateConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("namedParameterJdbcTemplate", NamedParameterJdbcTemplateConfiguration__BeanDefinitions.getNamedParameterJdbcTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration", JdbcTemplateAutoConfiguration__BeanDefinitions.getJdbcTemplateAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jdbc-org.springframework.boot.autoconfigure.jdbc.JdbcProperties", JdbcProperties__BeanDefinitions.getJdbcPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor", DatabaseInitializationDependencyConfigurer__BeanDefinitions.DependsOnDatabaseInitializationPostProcessor.getDependsOnDatabaseInitializationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration", JdbcClientAutoConfiguration__BeanDefinitions.getJdbcClientAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jdbcClient", JdbcClientAutoConfiguration__BeanDefinitions.getJdbcClientBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration", ReactorAutoConfiguration__BeanDefinitions.getReactorAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.reactor-org.springframework.boot.autoconfigure.reactor.ReactorProperties", ReactorProperties__BeanDefinitions.getReactorPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration", DataSourceInitializationConfiguration__BeanDefinitions.getDataSourceInitializationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("dataSourceScriptDatabaseInitializer", DataSourceInitializationConfiguration__BeanDefinitions.getDataSourceScriptDatabaseInitializerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration", SqlInitializationAutoConfiguration__BeanDefinitions.getSqlInitializationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties", SqlInitializationProperties__BeanDefinitions.getSqlInitializationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$ThreadPoolTaskSchedulerBuilderConfiguration", TaskSchedulingConfigurations__BeanDefinitions.ThreadPoolTaskSchedulerBuilderConfiguration.getThreadPoolTaskSchedulerBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("threadPoolTaskSchedulerBuilder", TaskSchedulingConfigurations__BeanDefinitions.ThreadPoolTaskSchedulerBuilderConfiguration.getThreadPoolTaskSchedulerBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$SimpleAsyncTaskSchedulerBuilderConfiguration", TaskSchedulingConfigurations__BeanDefinitions.SimpleAsyncTaskSchedulerBuilderConfiguration.getSimpleAsyncTaskSchedulerBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("simpleAsyncTaskSchedulerBuilder", TaskSchedulingConfigurations__BeanDefinitions.SimpleAsyncTaskSchedulerBuilderConfiguration.getSimpleAsyncTaskSchedulerBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration", TaskSchedulingAutoConfiguration__BeanDefinitions.getTaskSchedulingAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties", TaskSchedulingProperties__BeanDefinitions.getTaskSchedulingPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$JdbcTransactionManagerConfiguration", DataSourceTransactionManagerAutoConfiguration__BeanDefinitions.JdbcTransactionManagerConfiguration.getJdbcTransactionManagerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration", DataSourceTransactionManagerAutoConfiguration__BeanDefinitions.getDataSourceTransactionManagerAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration", ProxyTransactionManagementConfiguration__BeanDefinitions.getProxyTransactionManagementConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.transaction.config.internalTransactionAdvisor", ProxyTransactionManagementConfiguration__BeanDefinitions.getInternalTransactionAdvisorBeanDefinition());
    beanFactory.registerBeanDefinition("transactionInterceptor", ProxyTransactionManagementConfiguration__BeanDefinitions.getTransactionInterceptorBeanDefinition());
    beanFactory.registerBeanDefinition("transactionAttributeSource", ProxyTransactionManagementConfiguration__BeanDefinitions.getTransactionAttributeSourceBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.transaction.config.internalTransactionalEventListenerFactory", AbstractTransactionManagementConfiguration__BeanDefinitions.getInternalTransactionalEventListenerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration$CglibAutoProxyConfiguration", TransactionAutoConfiguration__BeanDefinitions.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration.getCglibAutoProxyConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration", TransactionAutoConfiguration__BeanDefinitions.EnableTransactionManagementConfiguration.getEnableTransactionManagementConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration", TransactionAutoConfiguration__BeanDefinitions.TransactionTemplateConfiguration.getTransactionTemplateConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("transactionTemplate", TransactionAutoConfiguration__BeanDefinitions.TransactionTemplateConfiguration.getTransactionTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration", TransactionAutoConfiguration__BeanDefinitions.getTransactionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("restTemplateBuilderConfigurer", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateBuilderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("restTemplateBuilder", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration", EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions.TomcatWebServerFactoryCustomizerConfiguration.getTomcatWebServerFactoryCustomizerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatWebServerFactoryCustomizer", EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions.TomcatWebServerFactoryCustomizerConfiguration.getTomcatWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration", EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions.getEmbeddedWebServerFactoryCustomizerAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration", HttpEncodingAutoConfiguration__BeanDefinitions.getHttpEncodingAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("characterEncodingFilter", HttpEncodingAutoConfiguration__BeanDefinitions.getCharacterEncodingFilterBeanDefinition());
    beanFactory.registerBeanDefinition("localeCharsetMappingsCustomizer", HttpEncodingAutoConfiguration__BeanDefinitions.getLocaleCharsetMappingsCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration", MultipartAutoConfiguration__BeanDefinitions.getMultipartAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("multipartConfigElement", MultipartAutoConfiguration__BeanDefinitions.getMultipartConfigElementBeanDefinition());
    beanFactory.registerBeanDefinition("multipartResolver", MultipartAutoConfiguration__BeanDefinitions.getMultipartResolverBeanDefinition());
    beanFactory.registerBeanDefinition("spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties", MultipartProperties__BeanDefinitions.getMultipartPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("jpaSharedEM_AWC_entityManagerFactory", SharedEntityManagerCreator__BeanDefinitions.getJpaSharedEMAWCentityManagerFactoryBeanDefinition());
  }

  /**
   * Register the aliases.
   */
  public void registerAliases(DefaultListableBeanFactory beanFactory) {
    beanFactory.registerAlias("applicationTaskExecutor", "taskExecutor");
  }
}
